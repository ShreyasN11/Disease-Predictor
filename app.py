import pickle
import streamlit as st
import numpy as np
from sklearn.preprocessing import StandardScaler

# Load your models here
diabetes_model = pickle.load(open('diabetes.pkl', 'rb'))
kidney_disease_model = pickle.load(open('kidney.pkl', 'rb'))
heart_disease_model = pickle.load(open('heart.pkl', 'rb'))
# heart_scaler = pickle.load(open('heart-scaler.pkl', 'rb'))
#print(type(kidney_disease_model))  # Should show a model type, like sklearn's LogisticRegression

def show_disclaimer():
    st.warning(
        """
        **Disclaimer**

        The information provided on this website is for informational purposes only and should not be considered medical advice. The predictions generated by my model are based on statistical algorithms and are not a substitute for professional medical diagnosis, treatment, or advice.

        Always consult a qualified healthcare provider with any questions you may have regarding a medical condition. Never disregard professional medical advice or delay seeking it because of something you have read on this website.

        I make no representations or warranties about the accuracy, reliability, or completeness of the information provided. Use of this website and its content is at your own risk. By using this site, you acknowledge that you have read, understood, and agree to be bound by this disclaimer.
        """
    )


# Create a custom sidebar layout
st.sidebar.title("DISEASE AI")
selected = st.sidebar.radio("Select Disease Prediction", 
                             ['Diabetes', 'Heart Disease', 'Chronic Kidney Disease'])


# Display the selected option's content
if selected == 'Diabetes':
    st.title('Diabetes Prediction')
    
    # Input fields for diabetes model
    pregnancies = st.number_input('Number of pregnancies', min_value=0)
    glucose = st.number_input('Glucose Level', min_value=0)
    blood_pressure = st.number_input('Blood Pressure', min_value=0)
    skin_thickness = st.number_input('Skin Thickness Level', min_value=0)
    insulin = st.number_input('Insulin Level', min_value=0)
    bmi = st.number_input('BMI', min_value=0.0)
    age = st.number_input('Age', min_value=0)
    
    # Prediction button
    if st.button('Predict Diabetes'):
        # Prepare the input data for prediction
        diabetes_features = np.array([[pregnancies,glucose, blood_pressure, skin_thickness,insulin, bmi, age]])
        # Predict
        diabetes_prediction = diabetes_model.predict(diabetes_features)
        
        # Display result
        if diabetes_prediction[0] == 1:
            st.error('The model predicts that the patient has high chance of Diabetes.')
        else:
            st.success('The model predicts that the patient has low chance of Diabetes.')

elif selected == 'Heart Disease':
    st.title('Heart Disease Prediction')
    
    # Input fields for heart disease model based on the specified features
    height = st.number_input('Height (cm)', min_value=0)
    weight = st.number_input('Weight (kg)', min_value=0)
    ap_hi = st.number_input('Systolic Blood Pressure', min_value=0)
    ap_lo = st.number_input('Diastolic Blood Pressure', min_value=0)
    
    # Categorical inputs
    cholesterol = st.selectbox('Cholesterol Level', ['Normal', 'Above Normal', 'Well Above Normal'])
    gluc = st.selectbox('Glucose Level', ['Normal', 'Above Normal', 'Well Above Normal'])
    smoke = st.selectbox('Smoking Status', ['Non-Smoker', 'Smoker'])
    alco = st.selectbox('Alcohol Consumption', ['Non-Drinker', 'Drinker'])
    active = st.selectbox('Physical Activity', ['Inactive', 'Active'])
    age_years = st.number_input('Age (years)', min_value=0)
    bmi = st.number_input('BMI', min_value=0.0)
    
    # Blood pressure categories dropdown
    bp_category = st.selectbox('Blood Pressure Category', ['Normal', 'Elevated', 'Hypertension Stage 1', 'Hypertension Stage 2'])

    # Gender dropdown
    gender = st.selectbox('Gender', ['Male', 'Female'])

    # Map categorical inputs to numerical values as expected by the model
    cholesterol = {'Normal': 1, 'Above Normal': 2, 'Well Above Normal': 3}[cholesterol]
    gluc = {'Normal': 1, 'Above Normal': 2, 'Well Above Normal': 3}[gluc]
    smoke = 1 if smoke == 'Smoker' else 0
    alco = 1 if alco == 'Drinker' else 0
    active = 1 if active == 'Active' else 0
    gender_1, gender_2 = (1, 0) if gender == 'Male' else (0, 1)
    bp_category_elevated = int(bp_category == 'Elevated')
    bp_category_stage1 = int(bp_category == 'Hypertension Stage 1')
    bp_category_stage2 = int(bp_category == 'Hypertension Stage 2')
    bp_category_normal = int(bp_category == 'Normal')

    # Prepare the features for prediction
    heart_features = np.array([[
        height, weight, ap_hi, ap_lo, cholesterol, gluc, smoke, alco, active, age_years, bmi,
        bp_category_elevated, bp_category_stage1, bp_category_stage2, bp_category_normal,
        gender_1, gender_2
    ]])

    
    if st.button('Predict Heart Disease'):
            # Predict using the model
            heart_prediction = heart_disease_model.predict(heart_features)
            
            # Display result
            if heart_prediction[0] == 1:
                st.error('The model predicts that the patient is at risk of Heart Disease.')
            else:
                st.success('The model predicts that the patient has low risk of Heart Disease.')


elif selected == 'Chronic Kidney Disease':
    st.title('Chronic Kidney Disease Prediction')
    
    # Input fields for kidney disease model
    blood_pressure = st.number_input('Blood Pressure (Diastolic)', min_value=0.0)
    sugar = st.number_input('Sugar', min_value=0.0)
    serum_creatinine = st.number_input('Serum Creatinine', min_value=0.0)
    blood_urea = st.number_input('Blood Urea', min_value=0.0)
    albumin = st.number_input('Albumin', min_value=0.0)
    hemoglobin = st.number_input('Hemoglobin', min_value=0.0)
    sodium = st.number_input('Sodium', min_value=0.0)
    potassium = st.number_input('Potassium', min_value=0.0)
    rbc = st.number_input('Red Blood Cell Count', min_value=0.0)
    wbc = st.number_input('White Blood Cell Count', min_value=0.0)
    hypertension = st.selectbox('Hypertension', ['Yes','No'])

    ht = 0 if hypertension == 'No' else 1
    
    
    # Prediction button
    if st.button('Predict Kidney Disease'):
        # Prepare the input data for prediction
        kidney_features = np.array([[blood_pressure, 1.02,albumin,sugar,1.0, blood_urea,serum_creatinine, sodium,potassium, hemoglobin,wbc,rbc,ht]])
        kidney_prediction = kidney_disease_model.predict(kidney_features)

        if kidney_prediction[0] == 1:
            st.error('The model predicts that the patient has high chance ofChronic Kidney Disease.')
        else:
            st.success('The model predicts that the patient has low chance of Chronic Kidney Disease.')

show_disclaimer()